(function(angular){var slice=[].slice;function indexOf(array,obj){if(array.indexOf)return array.indexOf(obj);for(var i=0;i<array.length;i++)if(obj===array[i])return i;return-1}angular.module("mvd.tunnels",[]).factory("mvdTunnelMap",function($rootScope){var map={};var mergeMessageMaps=function(tunnel,callbacks){var tMap;if(!(tMap=map[tunnel]))tMap=map[tunnel]={};for(var m in callbacks){if(!callbacks.hasOwnProperty(m))continue;var cbs=callbacks[m];if(!tMap[m])tMap[m]=angular.isArray(cbs)?cbs:[cbs];
else if(!angular.isArray(cbs))tMap[m].push(cbs);else for(var i=0,ii=cbs.length;i<ii;i++)tMap[m].push(cbs[i])}};var methods={listen:function(tunnel,message,cb){if(angular.isObject(message))return mergeMessageMaps(tunnel,message);else{if(!map[tunnel])map[tunnel]={};if(!map[tunnel][message])map[tunnel][message]=[];map[tunnel][message].push(cb);return function(){var mess=map[tunnel][message];mess[indexOf(mess,cb)]=null}}},send:function(tunnel,message){var cbs=map[tunnel]&&map[tunnel][message]||false;
if(!cbs)return;var e={tunnel:tunnel,message:message};var args=[e].concat(slice.call(arguments,2));for(var i=0,ii=cbs.length;i<ii;i++)if(angular.isFunction(cbs[i])){cbs[i].apply(null,args);if(!$rootScope.$$phase)$rootScope.$digest()}}};return methods}).directive("mvdTunnel",function(mvdTunnelMap){return{controller:function($scope,$element,$attrs){var namespace=$attrs.mvdTunnel||"*";var ctrl=this;ctrl.setNamespace=function(ns){namespace=ns};ctrl.listen=function(message,cb){return mvdTunnelMap.listen(namespace,
message,cb)};ctrl.on=function(message,cb){return ctrl.listen(message,cb)};ctrl.send=function(message){var args=[namespace].concat(slice.call(arguments,0));mvdTunnelMap.send.apply(null,args)}}}})})(angular);